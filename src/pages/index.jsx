import Head from "next/head";
import {
  Container,
  Heading,
  Table,
  Td,
  Th,
  Tr,
  Thead,
  Tbody,
  Spinner,
  Box,
  Text,
  FormControl,
  FormLabel,
  Input,
  VStack,
  Button,
  useToast,
} from "@chakra-ui/react";
import { useFetchProducts } from "@/features/product/useFetchProducts";
import { useFormik } from "formik";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { axiosInstance } from "@/lib/axios";
import * as Yup from "yup";

export default function Home() {
  const queryClient = useQueryClient();
  const toast = useToast();

  const {
    data,
    isLoading: productIsLoading,
    isError,
    error,
    refetch: refetchProducts,
  } = useFetchProducts();

  const formik = useFormik({
    initialValues: {
      name: "",
      price: "",
      description: "",
      image: "",
    },
    validationSchema: Yup.object({
      name: Yup.string().required("Required"),
      price: Yup.number().required("Required").positive("Must be positive"),
      description: Yup.string().required("Required"),
      image: Yup.string().url("Must be a valid URL").required("Required"),
    }),
    onSubmit: (values, { resetForm }) => {
      mutate(values);
      resetForm();

      toast({
        title: "Product created successfully",
        description: "The product has been created",
        status: "success",
        duration: 5000,
        isClosable: true,
      });
    },
  });

  const { mutate, isLoading: createProductIsLoading } = useMutation({
    mutationFn: async (values) => {
      const { name, price, description, image } = values;
      const productsResponse = await axiosInstance.post("/products", {
        name,
        price: parseInt(price),
        description,
        image,
      });
      return productsResponse;
    },
    onSuccess: () => {
      refetchProducts();
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: `Failed to create product: ${error.message}`,
        status: "error",
        duration: 5000,
        isClosable: true,
      });
    },
  });

  const { mutate: deleteProduct, isLoading: deleteProductIsLoading } =
    useMutation({
      mutationFn: async (id) => {
        const productsResponse = await axiosInstance.delete(`/products/${id}`);
        return productsResponse;
      },
      onSuccess: () => {
        toast({
          title: "Product deleted successfully",
          description: "The product has been deleted",
          status: "success",
          duration: 5000,
          isClosable: true,
        });
        refetchProducts();
      },
      onError: (error) => {
        console.log(error);
        toast({
          title: "Error",
          description: `Failed to delete product: ${error.message}`,
          status: "error",
          duration: 5000,
          isClosable: true,
        });
      },
    });

  const confirmationDelete = (productId) => {
    const shouldDelete = confirm("Are you sure you want to delete??");
    if (shouldDelete) {
      deleteProduct(productId);
    }
  };

  const renderProducts = () => {
    return data?.map((product) => (
      <Tr key={product.id}>
        <Td>{product.id}</Td>
        <Td>{product.name}</Td>
        <Td>{product.price}</Td>
        <Td>{product.description}</Td>
        <Td>
          <Button
            onClick={() => confirmationDelete(product.id)}
            colorScheme="red"
            isLoading={deleteProductIsLoading}>
            Delete
          </Button>
        </Td>
      </Tr>
    ));
  };

  if (isError) return <Text>An error has occurred: {error.message}</Text>;

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Container>
          <Heading>Hello World</Heading>
          {productIsLoading ? (
            <Box textAlign="center">
              <Spinner size="xl" />
            </Box>
          ) : (
            <Table mb="6">
              <Thead>
                <Tr>
                  <Th>ID</Th>
                  <Th>Name</Th>
                  <Th>Price</Th>
                  <Th>Description</Th>
                  <Th>Action</Th>
                </Tr>
              </Thead>
              <Tbody>{renderProducts()}</Tbody>
            </Table>
          )}
          <form onSubmit={formik.handleSubmit}>
            <VStack spacing="3">
              <FormControl
                isInvalid={formik.errors.name && formik.touched.name}>
                <FormLabel>Product Name</FormLabel>
                <Input
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                  value={formik.values.name}
                  type="text"
                  name="name"
                />
                {formik.errors.name && formik.touched.name && (
                  <Text color="red.500">{formik.errors.name}</Text>
                )}
              </FormControl>
              <FormControl
                isInvalid={formik.errors.price && formik.touched.price}>
                <FormLabel>Product Price</FormLabel>
                <Input
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                  value={formik.values.price}
                  type="text"
                  name="price"
                />
                {formik.errors.price && formik.touched.price && (
                  <Text color="red.500">{formik.errors.price}</Text>
                )}
              </FormControl>
              <FormControl
                isInvalid={
                  formik.errors.description && formik.touched.description
                }>
                <FormLabel>Product Description</FormLabel>
                <Input
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                  value={formik.values.description}
                  type="text"
                  name="description"
                />
                {formik.errors.description && formik.touched.description && (
                  <Text color="red.500">{formik.errors.description}</Text>
                )}
              </FormControl>
              <FormControl
                isInvalid={formik.errors.image && formik.touched.image}>
                <FormLabel>Product Image</FormLabel>
                <Input
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                  value={formik.values.image}
                  type="text"
                  name="image"
                />
                {formik.errors.image && formik.touched.image && (
                  <Text color="red.500">{formik.errors.image}</Text>
                )}
              </FormControl>
              {createProductIsLoading ? (
                <Box textAlign="center">
                  <Spinner size="xl" />
                </Box>
              ) : (
                <Button type="submit">Add Product</Button>
              )}
            </VStack>
          </form>
        </Container>
      </main>
    </>
  );
}
